# Ce script implémente un simple bot Telegram qui répond avec l'heure actuelle lorsqu'un utilisateur le demande.
# Il utilise la bibliothèque 'python-telegram-bot' pour interagir avec l'API Telegram et 'nest_asyncio' pour permettre
# l'utilisation d'asyncio dans des environnements qui ne le supportent généralement pas, comme Google Colab.

# Installer les bibliothèques nécessaires
!pip install python-telegram-bot nest_asyncio

# Importer les bibliothèques nécessaires
import nest_asyncio
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime
import logging

# Token du bot fourni par BotFather
TOKEN = 'votre-clé'

# Appliquer le patch pour permettre l'utilisation d'asyncio dans Google Colab
nest_asyncio.apply()

# Configurer le logging pour le débogage
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Fonction pour gérer la commande /start
# Lorsque l'utilisateur envoie /start, le bot répond avec un message de bienvenue.
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("Commande /start reçue")
    await update.message.reply_text('Bonjour! Envoyez /time pour connaître l\'heure actuelle.')

# Fonction pour gérer la commande /time
# Lorsque l'utilisateur envoie /time, le bot répond avec l'heure actuelle.
async def time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("Commande /time reçue")
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    await update.message.reply_text(f'L\'heure actuelle est {current_time}')

# Fonction principale pour configurer et exécuter le bot
async def main() -> None:
    logger.info("Initialisation du bot")
    app = ApplicationBuilder().token(TOKEN).build()

    # Ajouter des gestionnaires pour les commandes /start et /time
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("time", time))

    logger.info("Démarrage du polling")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    
    # Garder le bot en cours d'exécution
    logger.info("Le bot fonctionne, en attente de commandes...")
    await asyncio.Future()  # Garder le bot en cours d'exécution

# Finaliser toute instance asyncio précédente pour éviter les conflits
try:
    loop = asyncio.get_running_loop()
    for task in asyncio.all_tasks(loop):
        task.cancel()
    loop.stop()
    loop.run_forever()
    loop.close()
except:
    pass

logger.info("Exécution du bot")
# Exécuter la fonction principale pour démarrer le bot
asyncio.run(main())
