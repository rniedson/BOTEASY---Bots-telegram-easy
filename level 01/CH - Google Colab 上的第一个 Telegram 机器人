# 这个脚本实现了一个简单的 Telegram 机器人，当用户提示时，它会回复当前时间。
# 它使用 'python-telegram-bot' 库与 Telegram API 交互，并使用 'nest_asyncio' 使
# 在通常不支持的环境中使用 asyncio，例如 Google Colab。

# 安装必要的库
!pip install python-telegram-bot nest_asyncio

# 导入必要的库
import nest_asyncio
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime
import logging

# 由 BotFather 提供的机器人令牌
TOKEN = '你的密钥'

# 应用补丁以允许在 Google Colab 中使用 asyncio
nest_asyncio.apply()

# 配置日志记录以进行调试
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# 处理 /start 命令的函数
# 当用户发送 /start 时，机器人回复欢迎消息。
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("收到 /start 命令")
    await update.message.reply_text('你好！发送 /time 以了解当前时间。')

# 处理 /time 命令的函数
# 当用户发送 /time 时，机器人回复当前时间。
async def time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("收到 /time 命令")
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    await update.message.reply_text(f'当前时间是 {current_time}')

# 设置和运行机器人的主函数
async def main() -> None:
    logger.info("初始化机器人")
    app = ApplicationBuilder().token(TOKEN).build()

    # 添加 /start 和 /time 命令的处理程序
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("time", time))

    logger.info("开始轮询")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    
    # 让机器人保持运行
    logger.info("机器人正在运行，等待命令...")
    await asyncio.Future()  # 让机器人保持运行

# 终止任何先前的 asyncio 实例以避免冲突
try:
    loop = asyncio.get_running_loop()
    for task in asyncio.all_tasks(loop):
        task.cancel()
    loop.stop()
    loop.run_forever()
    loop.close()
except:
    pass

logger.info("运行机器人")
# 执行主函数以启动机器人
asyncio.run(main())
